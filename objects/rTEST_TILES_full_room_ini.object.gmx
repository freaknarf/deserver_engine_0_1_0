<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_point_pixel</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_exists(object_index))

    {
    
        with instance_exists(object_index)
        
            {
            
                instance_destroy()
                
            }
    
    }
    
//



play=true //useless

wall=true

vile=false



//iterations ?
tile=0
k=0
kk=0
kkk=1
l=32
m=32

///

tile_image[0]=obj_tile_ground_A_square32//spr_tile_blank_square
tile_image[1]=obj_tile_ground_A_slope_32
tile_image[2]=obj_tile_ground_A_half_slope_32
tile_image[3]=obj_tile_ground_A_half_slope_up_32

///

tileform[0]=obj_tile_ground_A_square32
tileform[1]=obj_tile_ground_A_slope_32
tileform[2]=obj_tile_ground_A_half_slope_32
tileform[3]=obj_tile_ground_A_half_slope_up_32

scr_vilainlist()
param_ini[0]=0
obj[0]=tileform[0]


scr_ini_param_w(1,1,1)
scr_ini_param_v(1,1,1,1,1,1)

param_ini[0]=0
param_ini[1]=1
param_ini[2]=2
param_ini[3]=3
param_ini[4]=4
param_ini[5]=5

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if keyboard_check_pressed(ord("R")) ///tile refresh

    {
        if !keyboard_check(vk_shift)
            scr_tile_refresh()///redessine les tiles mal mises
        if keyboard_check(vk_shift)//si on appuie sur shift en meme temps le decor est aussi refait
            scr_decor_refresh()
    }

if keyboard_check_pressed(ord("F"))///rempli l'écrande tiles...
    scr_full_tile(obj[k])

if keyboard_check_pressed(ord("N"))///adds new room
    with obj_w 
    {
        scr_tile_destroy(obj_box)//detruit tout ??
    }

scr_build_switch()

scr_build_instance_exists()



//

 



//




scr_build_mouse_wheel()



if play=false //// si la variable de jeu est sur faux les ai sont desactivées etc...
        {instance_deactivate_object(obj_p)//global.isRecording=false
        with obj_par_vilain

    {
        if instance_exists(obj_par_vilain)
            {
                x=xstart;
                y=ystart;
                state=0
            }
    }
    
        
        
        
        }
else//bascule
    if play=true
         {   instance_activate_object(obj_p)//global.isRecording=true


}
if keyboard_check_pressed((ord("P"))) ///avec la touche P on joue ou non
    {
        if play=true 
            play=false
        else
        if play=false 
            play=true
    }


/////////////SI ON APPUIE SUR CTRL
if keyboard_check(vk_control)
    {
    scr_zoom()
    }
else
    {scr_mouse_button_control()}
    
    

/*
with obj_par_vilain

    {
        if instance_exists(obj_par_vilain)
            {
                x=xstart;
                y=ystart;
                state=0
            }
    }
    
    
   
    */
    

    
    
    
ini_param[0]=k
ini_param[1]=tile

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="54">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !keyboard_check(vk_control)
{
var i,j;


{


i=l/2+round((mouse_x/l))*l
j=m/2+round((mouse_y/m))*m



}
if vile {ID=instance_create(i,j,obj[kk])


for (i=0;i&lt;=5;i++)
{
with ID{ini_param[i]=other.ini_param[i]}
}
}






if wall
{
        for (i=0;i&lt;=2;i++)
            {
            str=string(ini_param_name[i])
            if (mouse_x&gt;view_xview+32)
            and (mouse_y&gt;(view_yview+32*i)) 
            and (mouse_x&lt;(view_xview+32+string_width(str))) 
            and (mouse_y&lt;(view_yview+32*i + string_height(str) ))
            {
            
ini_param[i]--
}
            }
    
}

if vile
{
        for (i=0;i&lt;=5;i++)
            {
            str=string(ini_param_name[i])
            if (mouse_x&gt;view_xview+32)
            and (mouse_y&gt;(view_yview+32*i)) 
            and (mouse_x&lt;(view_xview+32+string_width(str))) 
            and (mouse_y&lt;(view_yview+32*i + string_height(str) ))
ini_param[i]--

            }
    
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !keyboard_check(vk_control)
{
if vile==true
{var i,j;


{


i=l/2+round((mouse_x/l))*l
j=m/2+round((mouse_y/m))*m



}
/*
if instance_exists(obj_par_vilain)
with instance_nearest(mouse_x,mouse_y,obj_par_vilain)
{instance_destroy()}*/

}








if wall
{
        for (i=0;i&lt;=2;i++)
            {
            str=string(ini_param_name[i])
            if (mouse_x&gt;view_xview+32)
            and (mouse_y&gt;(view_yview+32*i)) 
            and (mouse_x&lt;(view_xview+32+string_width(str))) 
            and (mouse_y&lt;(view_yview+32*i + string_height(str) ))
            {
            
ini_param[i]++
}
            }
    
}

if vile
{
        for (i=0;i&lt;=5;i++)
            {
            str=string(ini_param_name[i])
            if (mouse_x&gt;view_xview+32)
            and (mouse_y&gt;(view_yview+32*i)) 
            and (mouse_x&lt;(view_xview+32+string_width(str))) 
            and (mouse_y&lt;(view_yview+32*i + string_height(str) ))
ini_param[i]++

            }
    
}

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="51">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if !keyboard_check(vk_control)
{
var i,j;

{


i=l/2+round((mouse_x/l))*l
j=m/2+round((mouse_y/m))*m



}


if wall
{
if place_free(i,j)
{

ID=instance_create(i,j,obj_w)



for (i=0;i&lt;=2;i++)
{
with ID{ini_param[i]=other.ini_param[i]}

}
//tile?}
//ID.tile=kk//(string("blank"))














}
{
//with ID {sprite_index=other.tile_image[other.kk]}//a voir
}

}

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !keyboard_check(vk_control)
if keyboard_check(vk_shift)
{
with instance_nearest(mouse_x,mouse_y,all)
{
if object_index=obj_w
scr_tile_destroy(obj_box)
else
if object_index=obj_v
life--
}

}


if keyboard_check(vk_control)
if !keyboard_check(vk_shift)
with instance_nearest(mouse_x,mouse_y,all)
{
if object_index=obj_v
{
x=mouse_x
y=mouse_y
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
draw_self()

if keyboard_check(vk_backspace)//affiche le sprite
    {
        if object_exists(obj[k])
        
            {
                str=string(object_get_name(obj[k]))
                if sprite_exists(obj[k].sprite_index)
                draw_sprite(obj[k].sprite_index,0,mouse_x,mouse_y)
                draw_text(mouse_x,mouse_y,string(str))
            
            }
            else
            {}
    
    
    }
    
    

var str
if vile
{
str="vile"
}
if wall
{
str="wall"
}

{
draw_text(view_xview+32,view_yview+view_hview-64, string (str))


}

if wall

{
        for (i=0;i&lt;=2;i++)
            {
                draw_rectangle_colour(view_xview[0]+32,view_yview[0]+32*i,view_xview[0]+32+string_width(ini_param_name[i]),view_yview[0]+32*i + string_height(str),c_red,c_red,c_red,c_red,0)
                draw_text(view_xview[0]+32,view_yview[0]+32*i,string(ini_param_name[i])+string(ini_param[i]) )
            }
    
}


if vile

{
    for (i=0;i&lt;=5;i++)
        {
        
         draw_rectangle_colour(view_xview+32,view_yview+32*i,view_xview+32+string_width(str),view_yview+32*i + string_height(str),c_red,c_red,c_red,c_red,0)
             draw_text(view_xview+32,view_yview+32*i,string(ini_param_name[i])+string(ini_param[i]) )
             
        }

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
